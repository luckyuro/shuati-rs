diff --git a/exercises/vecs/vecs1.rs b/exercises/vecs/vecs1.rs
index 4e8c4cb..14901f4 100644
--- a/exercises/vecs/vecs1.rs
+++ b/exercises/vecs/vecs1.rs
@@ -4,11 +4,10 @@
 // Make me compile and pass the test!
 // Execute `rustlings hint vecs1` or use the `hint` watch subcommand for a hint.
 
-// I AM NOT DONE
 
 fn array_and_vec() -> ([i32; 4], Vec<i32>) {
     let a = [10, 20, 30, 40]; // a plain array
-    let v = // TODO: declare your vector here with the macro for vectors
+    let v = Vec::from(a.as_slice());// TODO: declare your vector here with the macro for vectors
 
     (a, v)
 }
diff --git a/exercises/vecs/vecs2.rs b/exercises/vecs/vecs2.rs
index 5bea09a..8d93b3e 100644
--- a/exercises/vecs/vecs2.rs
+++ b/exercises/vecs/vecs2.rs
@@ -6,13 +6,12 @@
 //
 // Execute `rustlings hint vecs2` or use the `hint` watch subcommand for a hint.
 
-// I AM NOT DONE
 
 fn vec_loop(mut v: Vec<i32>) -> Vec<i32> {
     for i in v.iter_mut() {
         // TODO: Fill this up so that each element in the Vec `v` is
         // multiplied by 2.
-        ???
+        *i *= 2
     }
 
     // At this point, `v` should be equal to [4, 8, 12, 16, 20].
@@ -23,7 +22,7 @@ fn vec_map(v: &Vec<i32>) -> Vec<i32> {
     v.iter().map(|num| {
         // TODO: Do the same thing as above - but instead of mutating the
         // Vec, you can just return the new number!
-        ???
+        num * 2
     }).collect()
 }
 
